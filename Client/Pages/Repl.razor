@page "/repl"
@layout MainLayout

@using Microsoft.CodeAnalysis

@inject ComponentCompilationService CompilationService
@inject IJSRuntime JsRuntime

<nav class="navbar navbar-default repl-navbar">
    <div class="container-fluid">
        <div class="navbar-header" style="color: #303133">
            <a href="/" class="navbar-brand">Blazor REPL</a>
            <button href="/" class="btn btn-link nav-action" @onclick="@Compile" disabled="@Loading">
                <i class="icon-play4"></i> RUN
            </button>
        </div>
    </div>
</nav>

<div class="row flex" style="margin: 0">
    @if (Loading)
    {
        <div class="user-page-overlay"></div>
        <div class="user-page-loader">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="text-center user-page-loader-text">@LoaderText</div>
    }

    <div id="user-code-editor-container">
        <div id="user-code-editor" style="height: 100%; border: 1px solid #ccc"></div>
    </div>
    <div id="user-page-window-container">
        <iframe id="user-page-window" src="?p=user-page" style="width: 100%; height: 100%"></iframe>
    </div>
</div>

<div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <strong style="margin-right: auto; font-weight: bold">Error List</strong>
        <span>@ErrorsCount errors / @WarningsCount warnings</span>
        <button type="button" style="margin-left: 0.5rem; margin-bottom: 0.25rem" class="close mt-1 toggle-error-list-btn" data-dismiss="toast" aria-label="Switch Visibility" @onclick="@ToggleDiagnostics">
            @if (AreDiagnosticsShown)
            {
                <i class="icon-circle-down"></i>
            }
            else
            {
                <i class="icon-circle-up"></i>
            }
        </button>
    </div>
    @if (AreDiagnosticsShown && Diagnostics.Any())
    {
        <div class="toast-body">
            <table class="table table-borderless">
                <thead>
                    <tr>
                        <th scope="col">Severity</th>
                        <th scope="col">Code</th>
                        <th scope="col">Description</th>
                        @*<th scope="col">File</th>*@
                        <th scope="col">Line</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var diagnostic in Diagnostics)
                    {
                        <tr>
                            <td>@diagnostic.Severity</td>
                            <td>@diagnostic.Code</td>
                            <td>@diagnostic.Description</td>
                            @*<td>@diagnostic.Descriptor</td>*@
                            <td>@(diagnostic.Line - UserComponentCodeStartLine + 1)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private const string BasicUserComponentCodePrefix =
@"@page ""/user-page""
@using System.Linq
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
";

    public string Preset { get; set; } = "basic";

    public string UserComponentCodePrefix => BasicUserComponentCodePrefix;

    public IReadOnlyCollection<CompilationDiagnostic> Diagnostics { get; set; } = Array.Empty<CompilationDiagnostic>();
    public int ErrorsCount { get; set; }
    public int WarningsCount { get; set; }

    public bool AreDiagnosticsShown { get; set; }

    public string LoaderText { get; set; }

    public bool Loading { get; set; }

    public int UserComponentCodeStartLine => UserComponentCodePrefix.Count(ch => ch == '\n');

    public void ToggleDiagnostics() => AreDiagnosticsShown = !AreDiagnosticsShown;

    public async Task UpdateLoaderText(string loaderText)
    {
        LoaderText = loaderText;
        StateHasChanged();
        await Task.Delay(10); // Ensure rendering has time to be called
    }

    public async Task Compile()
    {
        Loading = true;
        LoaderText = "Processing";
        await Task.Delay(10); // Ensure rendering has time to be called

        var code = await JsRuntime.InvokeAsync<string>("window.App.getEditorValue");

        var result = await CompilationService.CompileToAssembly("UserPage.razor", UserComponentCodePrefix + code, Preset, UpdateLoaderText);

        Diagnostics = result.Diagnostics.OrderByDescending(x => x.Severity).ThenBy(x => x.Code).ToList();

        ErrorsCount = Diagnostics.Count(d => d.Severity == DiagnosticSeverity.Error);
        WarningsCount = Diagnostics.Count(d => d.Severity == DiagnosticSeverity.Warning);

        AreDiagnosticsShown = true;
        Loading = false;

        if (result.AssemblyBytes != null && result.AssemblyBytes.Length > 0)
        {
            await JsRuntime.InvokeVoidAsync("window.App.readFile", result.AssemblyBytes);

            // TODO: Add error page in iframe
            await JsRuntime.InvokeVoidAsync("window.App.reloadIFrame", "user-page-window");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.App.initRepl", "user-code-editor-container", "user-page-window-container", "user-code-editor");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
